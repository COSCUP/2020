{"version":3,"sources":["webpack:///./src/pages/Room.vue","webpack:///./src/pages/Room.vue?ac19","webpack:///./src/pages/Room.vue?1ce3"],"names":["id","class","text","table","header","room","status","session","roomsSession","roomSession","key","roomsStatus","languageType","name","split","to","locationOfSession","timePeriodOf","title","body","empty","setup","_languageType","languagePack","initAgenda","getRoomsInProgressSession","dispatchRenderedEvent","value","timer","rawRoomsStatus","Object","fromEntries","map","isFull","socket","registerSocket","baseUrl","updateData","a","get","data","on","error","console","unregisterSocket","connected","disconnect","start","end","sessionId","params","query","from","setInterval","cb","clearInterval","render"],"mappings":"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","file":"js/room.daaf8fcb.js","sourcesContent":["<template>\n  <main id=\"room\" class=\"page-container\">\n    <table class=\"room-table\">\n      <thead>\n        <tr>\n          <th class=\"room\">{{ text.table.header.room }}</th>\n          <th class=\"status\">{{ text.table.header.status }}</th>\n          <th class=\"session\">{{ text.table.header.session }}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          v-for=\"roomSession in roomsSession\"\n          :key=\"`r-${roomSession.room.id}`\"\n        >\n          <td class=\"room\">\n            <span\n              class=\"bubble\"\n              :class=\"{ full: roomsStatus[roomSession.room.id] }\"\n            ></span>\n            <span>{{\n              roomSession.room[languageType].name.split(\" / \")[0]\n            }}</span>\n          </td>\n          <td class=\"status\">\n            <span\n              class=\"bubble\"\n              :class=\"{ full: roomsStatus[roomSession.room.id] }\"\n            ></span>\n            <span class=\"text\">{{\n              roomsStatus[roomSession.room.id]\n                ? text.table.body.status.full\n                : text.table.body.status.available\n            }}</span>\n          </td>\n          <td class=\"session\">\n            <router-link\n              v-if=\"roomSession.session\"\n              :to=\"locationOfSession(roomSession.session.id)\"\n              class=\"content\"\n            >\n              <h3 class=\"period\">\n                {{\n                  timePeriodOf(\n                    roomSession.session.start,\n                    roomSession.session.end\n                  )\n                }}\n              </h3>\n              <h2 class=\"title\">\n                {{ roomSession.session[languageType].title }}\n              </h2>\n            </router-link>\n            <p v-else class=\"content empty\">{{ text.table.body.empty }}</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </main>\n</template>\n\n<script lang=\"ts\">\nimport io from 'socket.io-client'\nimport axios from 'axios'\nimport { defineComponent, ref, onMounted, onBeforeUnmount, computed, nextTick } from 'vue'\nimport { RoomSession, formatTimeString } from '@/services/agenda'\n\nimport '@/assets/scss/pages/room.scss'\nimport { useRenderedEventDispatcher } from '@/plugins/renderedEventDispatcher'\nimport { RouteLocationRaw } from 'vue-router'\nimport { useStore } from '@/store'\n\nexport default defineComponent({\n  name: 'Room',\n  setup () {\n    const { languageType: _languageType, languagePack, initAgenda, getRoomsInProgressSession } = useStore()\n    const dispatchRenderedEvent = useRenderedEventDispatcher()\n    const languageType = computed(() => _languageType.value === 'zh-TW' ? 'zh' : _languageType.value)\n    const text = computed(() => languagePack.value.room)\n    const timer = ref(-1)\n    const roomsSession = ref<RoomSession[]>([])\n    const rawRoomsStatus = ref<{ id: string; isFull: boolean }[]>([])\n    const roomsStatus = computed(() => Object.fromEntries(rawRoomsStatus.value.map((room) => [room.id, room.isFull])))\n    let socket: SocketIOClient.Socket | null = null\n\n    const registerSocket = () => {\n      const baseUrl = 'https://coscup2020-room.deviltea.me'\n      const updateData = async () => {\n        const { data } = await axios.get(`${baseUrl}/api/rooms_status`)\n        rawRoomsStatus.value = data.roomsStatus\n      }\n\n      try {\n        socket = io(baseUrl)\n        socket.on('connect', updateData)\n        socket.on('update', updateData)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n\n    const unregisterSocket = () => {\n      if (socket && socket.connected) {\n        socket.disconnect()\n        socket = null\n      }\n    }\n\n    const timePeriodOf = (start: Date, end: Date) => `${formatTimeString(start, '：')} ~ ${formatTimeString(end, '：')}`\n\n    const locationOfSession = (sessionId): RouteLocationRaw => ({\n      name: 'AgendaDetail',\n      params: {\n        sessionId\n      },\n      query: {\n        from: 'room'\n      }\n    })\n\n    onMounted(async () => {\n      await initAgenda()\n      dispatchRenderedEvent()\n      await nextTick()\n      timer.value = setInterval((function cb () {\n        roomsSession.value = getRoomsInProgressSession()\n        return cb\n      })(), 3000)\n      registerSocket()\n    })\n\n    onBeforeUnmount(() => {\n      clearInterval(timer.value)\n      unregisterSocket()\n    })\n\n    return {\n      text,\n      languageType,\n      roomsSession,\n      roomsStatus,\n      timePeriodOf,\n      locationOfSession\n    }\n  }\n})\n</script>\n","\nimport io from 'socket.io-client'\nimport axios from 'axios'\nimport { defineComponent, ref, onMounted, onBeforeUnmount, computed, nextTick } from 'vue'\nimport { RoomSession, formatTimeString } from '@/services/agenda'\n\nimport '@/assets/scss/pages/room.scss'\nimport { useRenderedEventDispatcher } from '@/plugins/renderedEventDispatcher'\nimport { RouteLocationRaw } from 'vue-router'\nimport { useStore } from '@/store'\n\nexport default defineComponent({\n  name: 'Room',\n  setup () {\n    const { languageType: _languageType, languagePack, initAgenda, getRoomsInProgressSession } = useStore()\n    const dispatchRenderedEvent = useRenderedEventDispatcher()\n    const languageType = computed(() => _languageType.value === 'zh-TW' ? 'zh' : _languageType.value)\n    const text = computed(() => languagePack.value.room)\n    const timer = ref(-1)\n    const roomsSession = ref<RoomSession[]>([])\n    const rawRoomsStatus = ref<{ id: string; isFull: boolean }[]>([])\n    const roomsStatus = computed(() => Object.fromEntries(rawRoomsStatus.value.map((room) => [room.id, room.isFull])))\n    let socket: SocketIOClient.Socket | null = null\n\n    const registerSocket = () => {\n      const baseUrl = 'https://coscup2020-room.deviltea.me'\n      const updateData = async () => {\n        const { data } = await axios.get(`${baseUrl}/api/rooms_status`)\n        rawRoomsStatus.value = data.roomsStatus\n      }\n\n      try {\n        socket = io(baseUrl)\n        socket.on('connect', updateData)\n        socket.on('update', updateData)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n\n    const unregisterSocket = () => {\n      if (socket && socket.connected) {\n        socket.disconnect()\n        socket = null\n      }\n    }\n\n    const timePeriodOf = (start: Date, end: Date) => `${formatTimeString(start, '：')} ~ ${formatTimeString(end, '：')}`\n\n    const locationOfSession = (sessionId): RouteLocationRaw => ({\n      name: 'AgendaDetail',\n      params: {\n        sessionId\n      },\n      query: {\n        from: 'room'\n      }\n    })\n\n    onMounted(async () => {\n      await initAgenda()\n      dispatchRenderedEvent()\n      await nextTick()\n      timer.value = setInterval((function cb () {\n        roomsSession.value = getRoomsInProgressSession()\n        return cb\n      })(), 3000)\n      registerSocket()\n    })\n\n    onBeforeUnmount(() => {\n      clearInterval(timer.value)\n      unregisterSocket()\n    })\n\n    return {\n      text,\n      languageType,\n      roomsSession,\n      roomsStatus,\n      timePeriodOf,\n      locationOfSession\n    }\n  }\n})\n","import { render } from \"./Room.vue?vue&type=template&id=1bd753fe&bindings={}\"\nimport script from \"./Room.vue?vue&type=script&lang=ts\"\nexport * from \"./Room.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}